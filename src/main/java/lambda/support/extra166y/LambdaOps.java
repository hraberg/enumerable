package lambda.support.extra166y;

import lambda.annotation.NewLambda;
import lambda.exception.LambdaWeavingNotEnabledException;
import extra166y.Ops.*;

/**
 * This is class is similar {@link lambda.Lambda}, but instead of creating
 * lambdas inheriting from {@link lambda.Fn0} it creates lambdas implementing
 * the interfaces defined in {@link extra166y.Ops}, to be used together with
 * {@link extra166y.ParallelArray}.
 * <p>
 * <i>This file was generated by lambda.extra166y.LambdaOpsGenerator.</i>
 */
public class LambdaOps {

    @NewLambda
    public static <A, B> ObjectAndObjectToDouble<A, B> op(A a1, B a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, B> ObjectAndObjectToLong<A, B> op(A a1, B a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, B> ObjectAndObjectToInt<A, B> op(A a1, B a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, B> ObjectAndObjectProcedure<A, B> procedure(A a1, B a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> ObjectAndDoubleToObject<A, R> op(A a1, double a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndDoubleToDouble<A> op(A a1, double a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndDoubleToLong<A> op(A a1, double a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndDoubleToInt<A> op(A a1, double a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndDoublePredicate<A> op(A a1, double a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndDoubleProcedure<A> procedure(A a1, double a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> ObjectAndLongToObject<A, R> op(A a1, long a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndLongToDouble<A> op(A a1, long a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndLongToLong<A> op(A a1, long a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndLongToInt<A> op(A a1, long a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndLongPredicate<A> op(A a1, long a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndLongProcedure<A> procedure(A a1, long a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> ObjectAndIntToObject<A, R> op(A a1, int a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndIntToDouble<A> op(A a1, int a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndIntToLong<A> op(A a1, int a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndIntToInt<A> op(A a1, int a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndIntPredicate<A> op(A a1, int a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectAndIntProcedure<A> procedure(A a1, int a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> DoubleAndObjectToObject<A, R> op(double a1, A a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> DoubleAndObjectToDouble<A> op(double a1, A a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> DoubleAndObjectToLong<A> op(double a1, A a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> DoubleAndObjectToInt<A> op(double a1, A a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> DoubleAndObjectPredicate<A> op(double a1, A a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> DoubleAndObjectProcedure<A> procedure(double a1, A a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> DoubleAndDoubleToObject<R> op(double a1, double a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndDoubleToLong op(double a1, double a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndDoubleToInt op(double a1, double a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndDoubleProcedure procedure(double a1, double a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> DoubleAndLongToObject<R> op(double a1, long a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndLongToDouble op(double a1, long a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndLongToLong op(double a1, long a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndLongToInt op(double a1, long a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndLongPredicate op(double a1, long a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndLongProcedure procedure(double a1, long a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> DoubleAndIntToObject<R> op(double a1, int a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndIntToDouble op(double a1, int a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndIntToLong op(double a1, int a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndIntToInt op(double a1, int a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndIntPredicate op(double a1, int a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleAndIntProcedure procedure(double a1, int a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> LongAndObjectToObject<A, R> op(long a1, A a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> LongAndObjectToDouble<A> op(long a1, A a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> LongAndObjectToLong<A> op(long a1, A a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> LongAndObjectToInt<A> op(long a1, A a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> LongAndObjectPredicate<A> op(long a1, A a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> LongAndObjectProcedure<A> procedure(long a1, A a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> LongAndDoubleToObject<R> op(long a1, double a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndDoubleToDouble op(long a1, double a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndDoubleToLong op(long a1, double a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndDoubleToInt op(long a1, double a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndDoublePredicate op(long a1, double a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndDoubleProcedure procedure(long a1, double a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> LongAndLongToObject<R> op(long a1, long a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndLongToDouble op(long a1, long a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndLongToInt op(long a1, long a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndLongProcedure procedure(long a1, long a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> LongAndIntToObject<R> op(long a1, int a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndIntToDouble op(long a1, int a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndIntToLong op(long a1, int a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndIntToInt op(long a1, int a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndIntPredicate op(long a1, int a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongAndIntProcedure procedure(long a1, int a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> IntAndObjectToObject<A, R> op(int a1, A a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> IntAndObjectToDouble<A> op(int a1, A a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> IntAndObjectToLong<A> op(int a1, A a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> IntAndObjectToInt<A> op(int a1, A a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> IntAndObjectPredicate<A> op(int a1, A a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> IntAndObjectProcedure<A> procedure(int a1, A a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> IntAndDoubleToObject<R> op(int a1, double a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndDoubleToDouble op(int a1, double a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndDoubleToLong op(int a1, double a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndDoubleToInt op(int a1, double a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndDoublePredicate op(int a1, double a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndDoubleProcedure procedure(int a1, double a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> IntAndLongToObject<R> op(int a1, long a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndLongToDouble op(int a1, long a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndLongToLong op(int a1, long a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndLongToInt op(int a1, long a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndLongPredicate op(int a1, long a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndLongProcedure procedure(int a1, long a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> IntAndIntToObject<R> op(int a1, int a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndIntToDouble op(int a1, int a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndIntToLong op(int a1, int a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntAndIntProcedure procedure(int a1, int a2, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectToDouble<A> op(A a1, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectToLong<A> op(A a1, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> ObjectToInt<A> op(A a1, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> DoubleToObject<R> op(double a1, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleToLong op(double a1, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleToInt op(double a1, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> LongToObject<R> op(long a1, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongToDouble op(long a1, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongToInt op(long a1, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> IntToObject<R> op(int a1, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntToDouble op(int a1, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntToLong op(int a1, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static Action action(Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleComparator comparator(double a1, double a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleReducer reducer(double a1, double a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleGenerator op(double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleProcedure procedure(double a1, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static BinaryDoublePredicate op(double a1, double a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoublePredicate op(double a1, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static BinaryDoubleOp op(double a1, double a2, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static DoubleOp op(double a1, double block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongComparator comparator(long a1, long a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongReducer reducer(long a1, long a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongGenerator op(long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongProcedure procedure(long a1, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static BinaryLongPredicate op(long a1, long a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongPredicate op(long a1, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static BinaryLongOp op(long a1, long a2, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static LongOp op(long a1, long block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntComparator comparator(int a1, int a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntReducer reducer(int a1, int a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static BinaryIntPredicate op(int a1, int a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntGenerator op(int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntProcedure procedure(int a1, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntPredicate op(int a1, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static BinaryIntOp op(int a1, int a2, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static IntOp op(int a1, int block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> Reducer<A> reducer(A a1, A a2, A block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <R> Generator<R> op(R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> Procedure<A> procedure(A a1, Object block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, B> BinaryPredicate<A, B> op(A a1, B a2, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A> Predicate<A> op(A a1, boolean block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, B, R> BinaryOp<A, B, R> op(A a1, B a2, R block) {
        throw new LambdaWeavingNotEnabledException();
    }

    @NewLambda
    public static <A, R> Op<A, R> op(A a1, R block) {
        throw new LambdaWeavingNotEnabledException();
    }
}
